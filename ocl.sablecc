/* 
 * OCL 2.0 compliant grammar for SableCC 3.2
 *
 * Copyright (C) 2004 Fadi Chabarek 
 * Copyright (C) 2010, 2011 Raphael Randschau
 * 
 * This library is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU Lesser General Public 
 * License as published by the Free Software Foundation; either 
 * version 2.1 of the License, or (at your option) any later version. 
 * 
 * This library is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 * Lesser General Public License for more details. 
 * 
 * You should have received a copy of the GNU Lesser General Public 
 * License along with this library; if not, write to the Free Software 
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
 */
Package ocl;

Helpers

 tab = 9;
 cr = 13;
 lf = 10;
 digit = ['0'..'9'];
 number_seperator = '.';
 number_fraction = number_seperator digit+;
 lowercase = ['a'..'z'];
 uppercase = ['A'..'Z'];
 letter = lowercase | uppercase;
 idletter = letter | '_';
 idletter_or_digit = letter | digit;
 idletter_with_digit_or_space = idletter_or_digit | ' ';

Tokens

  // separators
  eol     = cr | lf | cr lf;
  blank   = ' ' | tab;
  dot = '.';
  arrow = '->';
  colon = ':';
  dcolon = '::';
  l_par = '(';
  r_par = ')';
  l_bracket = '[';
  r_bracket = ']';
  l_brace = '{';
  r_brace = '}';
  semicolon = ';';
  comma = ',';
  at = '@';
  bar = '|';
  ddot = '..';
  roof = '^';
  droof = '^^';
  qmark = '?';
 
  // operators
  not = 'not';
  mult = '*';
  div = '/';
  plus = '+';
  minus = '-';
  equal = '=';
  n_equal = '<>';
  lt = '<';
  gt = '>';
  lteq = '<=';
  gteq = '>=';
  and = 'and';
  or = 'or';
  xor = 'xor';
  implies = 'implies';
 
  // keywords
  context = 'context';
  package = 'package';
  endpackage = 'endpackage';
  k_set = 'Set';
  k_ordered_set = 'OrderedSet';
  k_bag = 'Bag';
  k_sequence = 'Sequence';
  k_collection = 'Collection';
  k_tuple = 'Tuple';
  k_null = 'null';
  k_if = 'if';
  k_then = 'then';
  k_else = 'else';
  k_endif = 'endif';
  k_let = 'let';
  k_in = 'in';
  k_pre = 'pre';
  k_post = 'post';
  k_inv = 'inv';
  k_def = 'def';
  k_init = 'init';
  k_body = 'body';
  k_derive = 'derive';
 
  // literals
  boolean_literal = 'true' | 'false';
  number_literal = digit+ number_fraction?;
  string_literal = '"' (idletter_with_digit_or_space)* '"';
 
  // identifier
  id      = idletter_or_digit+;

Ignored Tokens

  blank,
  eol;

Productions

  ocl_file =
    ocl_package+;
   
  ocl_package =
    package path_name_cs context_decl* endpackage;
   
  context_decl =
    {init_derive} [context]:attr_assoc_cs
    |
    {inv_def} [context]:classifier_cs
    |
    {pre_post_body} [context]:operation_cs;
   
  attr_assoc_cs =
    context [context_name]:path_name_cs colon type_cs init_derive_cs+;
 
  classifier_cs =
    context [context_name]:path_name_cs inv_def_cs+;
   
  operation_cs =
    context [context_name]:path_name_cs property_call_parameters? return_type? pre_post_body_cs+;
     
  pre_post_body_cs =
    {pre_condition} k_pre colon [pre]:primary_expression
    |
    {post_condition} k_post colon [post]:primary_expression
    |
    {body_condition} k_body colon [body]:primary_expression;
   
  init_derive_cs =
    {initial} k_init colon [init]:primary_expression
    |
    {derive} k_derive colon [derive]:primary_expression;
   
  inv_def_cs = 
    {constraint} k_inv simple_name_cs? colon [invariant]:primary_expression
    |
    {definition} k_def simple_name_cs? colon def_expression;
   
  return_type =
    colon type_cs;
   
  classifier_type =
    colon simple_name_cs;
   
  context_operation_name =
    simple_name_cs 
    |
    {logical} logical_operator 
    |
    {relational} relational_operator 
    |
    {add} add_operator 
    |
    {multiply} multiply_operator;
   
  property_call =
    simple_name_cs is_marked_pre? qualifiers? [parameters]:property_call_parameters?;
   
  property_call_parameters =
    l_par declarator? [parameters]:actual_parameter_list? r_par;
   
  actual_parameter_list =
    expression next_expr*;
   
  next_expr =
    comma expression;
   
  collection_item_list =
    collection_item next_collection_item*;
   
  next_collection_item =
    comma collection_item;
   
  collection_item =
    expression range?;
   
  range =
    ddot expression;
   
  declarator =
    {concrete} actual_parameter_list simple_type_postfix? accumulator? bar;
   
  accumulator =
    semicolon simple_name_cs colon type_cs equal expression;
   
  name_list =
    simple_name_cs next_name*;
 
  next_name =
    comma simple_name_cs;
 
  simple_type_postfix =
    colon path_name_cs;
 
  qualifiers =
    l_bracket actual_parameter_list r_bracket;
   
  primary_expression =
    [let]:let_exp_cs? expression;
  
  // 9.3.35
  let_exp_cs = 
    k_let variable_declaration_cs let_exp_sub_cs;
  
  // 9.3.36
  let_exp_sub_cs = 
    {let_expr} comma variable_declaration_cs let_exp_sub_cs
    |
    k_in;
    
  // 9.3.27
  variable_declaration_list_cs =
    {one} variable_declaration_cs
    |
    {many} variable_declaration_cs comma variable_declaration_list_cs;
    
  // 9.3.23
  variable_declaration_cs =
    simple_name_cs type_postfix? variable_declaration_equation?;
    
  variable_declaration_equation =
    equal expression;
   
  def_expression =
    {variable} variable_decl_cs equal primary_expression 
    |
    {operation} property_call equal primary_expression;
 
  variable_decl_cs =
    simple_name_cs return_type?;
 
  type_postfix =
    colon type_cs;
    
  // 9.3.40
  if_expression =
    k_if [condition]:expression k_then [then_branch]:expression k_else [else_branch]:expression k_endif;
 
  expression =
    logical_expression;
   
  logical_expression =
    boolean_expression implication*;
 
  implication =
    implies_operator boolean_expression;
   
  boolean_expression =
    relational_expression boolean_operation*;
   
  boolean_operation =
    boolean_operator relational_expression;
   
  relational_expression =
    compareable_expression equation?;
   
  equation =
    [operator]:equation_operator compareable_expression;
   
  compareable_expression =
    additive_expression comparison?;
   
  comparison =
    [operator]:compare_operator additive_expression;
   
  additive_expression =
    multiplicative_expression addition*;
   
  addition =
    [operator]:add_operator multiplicative_expression;
   
  multiplicative_expression =
    unary_expression multiplication*;
   
  multiplication =
    [operator]:multiply_operator unary_expression;
   
  unary_expression =
    {prefixed} [operator]:unary_operator [expression]:postfix_expression 
    |
    [expression]:postfix_expression;

  postfix_expression =
    ocl_expression property_invocation*;

  // 9.3.2
  ocl_expression =
    {collection} collection_literal_exp_cs
    |
    {literal} literal_exp_cs
    |
    {variable} variable_exp_cs
    |
    {property_call} property_call
    |
    {parenthesed} l_par expression r_par
    |
    {message} ocl_message_exp_cs
    |
    {if} if_expression;
   
  property_invocation =
    {object} dot property_call
    |
    {collection} arrow property_call;
 
  // 9.3.33
  is_marked_pre = at k_pre;
  
  // 9.3.37
  ocl_message_exp_cs =
    {d} ocl_expression droof simple_name_cs l_par ocl_message_arguments_cs? r_par
    |
    ocl_expression roof simple_name_cs l_par ocl_message_arguments_cs? r_par;

  // 9.3.38
  ocl_message_arguments_cs =
    ocl_message_arg_cs next_ocl_message_arguments_cs?;
    
  next_ocl_message_arguments_cs =
    comma ocl_message_arguments_cs;
  
  // 9.3.39  
  ocl_message_arg_cs =
    {qmark} qmark return_type?
    |
    ocl_expression;

  logical_operator =
    boolean_operator 
    |
    {implicative} implies_operator;
   
  boolean_operator =
    {and} and |
    {or} or |
    {xor} xor;
   
  implies_operator = implies;
 
  relational_operator =
    {equality} equation_operator 
    |
    {compare} compare_operator;
 
  equation_operator =
    equal 
    |
    {in} n_equal;
   
  compare_operator =
    {gt} gt 
    |
    {lt} lt 
    |
    {gteq} gteq 
    |
    {lteq} lteq;
 
  add_operator =
    {plus} [sign]:plus 
    |
    {minus} [sign]:minus;
   
  multiply_operator =
    {mult} mult 
    |
    {div} div;
   
  unary_operator =
    {minus} minus 
    |
    {not} not;

  // 9.3.24
  type_cs =
    {ocl_any} path_name_cs 
    |
    {coll} [collection]:collection_type_cs
    |
    {tupl} [tuple]:tuple_type_cs;
    
  // 9.3.25
  collection_type_cs = 
    collection_type_identifier_cs l_par type_cs r_par;
    
  // 9.3.26
  tuple_type_cs =
    k_tuple l_par variable_declaration_list_cs? r_par;
    
  // 9.3.3
  variable_exp_cs =
    simple_name_cs;
    
  // 9.3.4
  simple_name_cs =
    id;
    
  // 9.3.5
  path_name_cs =
    simple_name_cs path_name?;
  
  path_name =
    dcolon path_name_cs;
  
  // 9.3.6
  literal_exp_cs =
    {enumeration} enum_literal
    |
    {coll} collection_literal_exp_cs
    |
    tuple_literal_exp_cs
    |
    {primitive} primitive_literal_exp_cs;
  
  // 9.3.7
  enum_literal =
    simple_name_cs path_name;
  
  // 9.3.8
  collection_literal_exp_cs =
    collection_type_identifier_cs l_brace collection_literal_parts_cs? r_brace;
 
  // 9.3.9
  collection_type_identifier_cs =
    {set} k_set
    |
    {ordered_set} k_ordered_set
    |
    {bag} k_bag
    |
    {sequence} k_sequence
    |
    k_collection;
 
  // 9.3.10
  collection_literal_parts_cs =
    [collection_part]:collection_literal_part_cs next_collection_literal_part_cs?;
 
  next_collection_literal_part_cs =
    comma collection_literal_parts_cs;
 
  // 9.3.11
  collection_literal_part_cs = 
    // collection_range_cs        // see 9.3.12
    // |
    expression;
 
  // 9.3.12  - not used due to recursion errors
  collection_range_cs =
    [l_expr]:expression comma [r_expr]:expression;
 
  // 9.3.13  
  primitive_literal_exp_cs =
    {number} number_literal
    |
    {string} string_literal
    |
    {boolean} boolean_literal
    |
    // 9.3.41
    {null} k_null;
 
  // 9.3.14
  tuple_literal_exp_cs = 
    k_tuple l_brace variable_declaration_list_cs r_brace;
 